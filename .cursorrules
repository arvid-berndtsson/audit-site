# Cursor Rules for Audit Site Project

## Project Overview
This is a Docusaurus v3 site for ISO 27001 and SOC 2 compliance guidance, built with TypeScript, pnpm, and Tailwind CSS.

## Code Style & Standards

### TypeScript
- Use strict TypeScript configuration
- Prefer explicit types over `any`
- Use interfaces for object shapes
- Use `JSX.Element` return type for React components

### React Components
- Use functional components with hooks
- Prefer named exports over default exports
- Use proper TypeScript interfaces for props
- Follow Docusaurus component patterns

### Styling
- Use Tailwind CSS utility classes
- Use daisyUI components when appropriate
- Follow the custom color scheme defined in tailwind.config.js
- Use CSS modules for component-specific styles

### File Organization
- Keep components in `src/components/`
- Use TypeScript for all new files (.ts, .tsx)
- Follow Docusaurus file naming conventions
- Group related components in subdirectories

## Content Guidelines
- Keep sentences under 14 words
- Use Oxford commas
- Include checklists and visual summaries
- Avoid consultant jargon
- Focus on actionable guidance
- Use clear, professional tone

## Documentation
- All documentation goes in `docs/` directory
- Use Markdown with frontmatter
- Include sidebar_position in frontmatter
- Link to other docs using relative paths
- Use proper heading hierarchy

## Dependencies
- Use pnpm as package manager
- Keep dependencies up to date
- Prefer stable versions over latest
- Document any non-standard dependencies

## Git & Version Control
- Use conventional commit messages
- Keep commits focused and atomic
- Update sidebar.ts when adding new docs
- Test changes before committing

## License Compliance
- This project uses AGPL-3.0 license
- All contributions must comply with AGPL-3.0
- Preserve copyright notices
- Include license information in new files

## Performance
- Optimize for fast loading
- Use proper image optimization
- Minimize bundle size
- Follow Docusaurus best practices

## Accessibility
- Use semantic HTML
- Include proper alt text for images
- Ensure keyboard navigation works
- Follow WCAG guidelines

## Testing
- Test changes in development
- Verify responsive design
- Check for broken links
- Validate TypeScript compilation 